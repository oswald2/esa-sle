cabal-version:      3.0

-- Initial package description 'esa-sle.cabal' generated by
-- 'cabal init'. For further documentation, see:
--   http://haskell.org/cabal/users-guide/
-- 
-- The name of the package.
name:               esa-sle

-- The package version.
-- See the Haskell package versioning policy (PVP) for standards
-- guiding when and how versions should be incremented.
-- https://pvp.haskell.org
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- non-breaking API additions
--                   | | | +--- code changes with no API change
version:            0.1.0.0

-- A short (one-line) description of the package.
synopsis:           Haskell binding to ESA's SLE C++ API

-- A longer description of the package.
-- description:

-- URL for the project homepage or repository.
homepage:           https://github.com/oswald2/esa-sle

-- A URL where users can report bugs.
-- bug-reports:

-- The license under which the package is released.
license:            BSD-3-Clause

-- The file containing the license text.
license-file:       LICENSE

-- The package author(s).
author:             Michael Oswald

-- An email address to which users can send suggestions, bug reports, and patches.
maintainer:         michael.oswald@onikudaki.net

-- A copyright notice.
-- copyright:
category:           System

-- Extra files to be distributed with the package, such as examples or a README.
extra-source-files: CHANGELOG.md

common cxx-opts
  -- These options are for compilation of C++ _files_. We need to duplicate
  -- these in ghc-options to apply them on inline-c-cpp snippets.
  -- This is partly(?) due to Cabal < 3.2.1.0 not passing cxx-options to
  -- GHC 8.10 correctly. See https://github.com/haskell/cabal/issues/6421
  cxx-options:
    -- Compilers strive to be ABI compatible regardless of the C++ language
    -- version (except perhaps experimental features).
    -- Discussion: https://stackoverflow.com/questions/46746878/is-it-safe-to-link-c17-c14-and-c11-objects/49118876
    -- We only have to raise this if a new inline-c-cpp feature requires us to
    -- bundle C++ code that requires a newer version of the standard.
    -- Generated code in user libraries will be compiled with the language
    -- version configured there.
    -std=c++11
    -Wall
  extra-libraries: stdc++

  ghc-options:
      
      -g2 -Wall -Wcompat -Widentities -Wincomplete-record-updates
            -Wincomplete-uni-patterns -Wredundant-constraints -Wpartial-fields
              -funbox-strict-fields -optcxx-Wall

library
    import: cxx-opts
    -- Modules exported by the library.
    exposed-modules:  
        SLE.Types
        SLE.ServiceInstance
        SLE.ServiceElement

    -- Modules included in this library but not exported.
    -- other-modules:

    -- LANGUAGE extensions used by modules in this package.
    -- other-extensions:

    -- Other library packages from which modules are imported.
    build-depends:    base ^>=4.14.1.0,
        rio,
        inline-c,
        inline-c-cpp

    -- Directories containing source files.
    hs-source-dirs:   src

    include-dirs: 
        ../Testbed/src
        ../SLEAPI/sleapi3.6.2_sles12_gcc4/include
        /usr/include/tcl8.6

    -- Base language which the package is written in.
    default-language: Haskell2010
    default-extensions:
        BangPatterns
        BinaryLiterals
        ConstraintKinds
        DataKinds
        DefaultSignatures
        DeriveDataTypeable
        DeriveFoldable
        DeriveFunctor
        DeriveGeneric
        DeriveTraversable
        DoAndIfThenElse
        EmptyDataDecls
        ExistentialQuantification
        FlexibleContexts
        FlexibleInstances
        FunctionalDependencies
        GADTs
        DeriveAnyClass
        InstanceSigs
        KindSignatures
        LambdaCase
        MultiParamTypeClasses
        MultiWayIf
        NamedFieldPuns
        NoImplicitPrelude
        OverloadedStrings
        PartialTypeSignatures
        PatternGuards
        PolyKinds
        RankNTypes
        RecordWildCards
        ScopedTypeVariables
        StandaloneDeriving
        TupleSections
        TypeFamilies
        TypeSynonymInstances
        TypeApplications
        ViewPatterns
        NumericUnderscores


executable SLETest 
    main-is: Main.hs
    default-language: Haskell2010
    hs-source-dirs: app
    ghc-options: -Wall -O2 -threaded -rtsopts -eventlog 
    extra-lib-dirs:
        ../Testbed/build/lib
        /home/oswald/Projects/Haskell/SLE/SLE/SLEAPI/sleapi3.6.2_sles12_gcc4/include
    extra-libraries:
        stdc++, dl, z, pthread, SLEwrapper, sleapi, sleinf, asnsdk_50_sles12_linux64bit_gcc4
    build-depends:
        base
        , rio
        , text
        , unliftio
        , esa-sle



test-suite esa-sle-test
    -- Base language which the package is written in.
    default-language: Haskell2010

    -- The interface type and version of the test suite.
    type:             exitcode-stdio-1.0

    -- Directories containing source files.
    hs-source-dirs:   test

    -- The entrypoint to the test suite.
    main-is:          MyLibTest.hs

    -- Test dependencies.
    build-depends:    base ^>=4.14.1.0
